version: "3.8"

services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  redis-stack:
    image: redis/redis-stack-server:latest
    container_name: redis-stack-server
    ports:
      - "6379:6379"
    networks:
      - app-network

  chatbot_history:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/chatbot_history/.env
    environment:
      - PYTHONUNBUFFERED=1
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
    ports:
      - "8003:8003"
    networks:
      - app-network
    tty: true
    stdin_open: true

  chatbot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/chatbot/.env
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "8001:8001"
    networks:
      - app-network
    tty: true
    stdin_open: true

  auth:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/Auth/Auth/.env
    environment:
      - PYTHONUNBUFFERED=1
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis-stack
    networks:
      - app-network
    tty: true
    stdin_open: true

  chatbot-service:
    image: chatbot-service:latest
    env_file:
      - .env
    ports:
      - "8011:8001"
    depends_on:
      - postgres
      - redis-stack
    networks:
      - app-network

  chatbot-historys:
    image: chatbot_history:latest
    env_file:
      - .env
    ports:
      - "8013:8003"
    depends_on:
      - postgres
      - redis-stack
    networks:
      - app-network

  vector_service:
    image: vector-service:latest
    env_file:
      - .env
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - redis-stack
    networks:
      - app-network

  ngrok:
    image: ngrok/ngrok:alpine
    depends_on:
      - auth
      - chatbot
      - chatbot_history
    volumes:
      - ./backend/ngrok.yml:/etc/ngrok.yml
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command: start --all --config /etc/ngrok.yml
    ports:
      - "4040:4040"
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
