name: Build, Push, and Release

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"  # Semantic version tags
    paths:
      - "backend/**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 2 * * 1-5"

env:
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PORT: 5432
  SSL_MODE: require

jobs:
  build-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: auth
            context: ./backend/Auth
            dockerfile: ./backend/Auth/Dockerfile
            image: authentication-service
          - name: chatbot
            context: ./backend/chatbot
            dockerfile: ./backend/chatbot/Dockerfile
            image: chatbot-service
          - name: history
            context: ./backend/chatbot_history
            dockerfile: ./backend/chatbot_history/Dockerfile
            image: chatbot-history-service
          - name: vector
            context: ./backend/vector_services
            dockerfile: ./backend/vector_services/Dockerfile
            image: vector-service

    services:
      redis:
        image: redis/redis-stack-server:latest
        ports: [6379:6379]
      rabbitmq:
        image: rabbitmq:3-management
        ports: [5672:5672, 15672:15672]

    outputs:
      version: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version or fallback to SHA
        id: meta
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="${GITHUB_SHA}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate Docker tags
        id: tags
        run: |
          TAGS="lewis254/${{ matrix.service.image }}:latest,lewis254/${{ matrix.service.image }}:${{ env.VERSION }}"
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: ${{ github.event_name == 'push' || github.event_name == 'schedule' }}
          tags: ${{ steps.tags.outputs.TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: build-push
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [build-push]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging/Prod
        run: |
          echo "Deploying lewis254 images to staging..."
          # Example: curl -X POST your-deployment-endpoint
          # or: ssh user@server "docker pull lewis254/... && docker-compose up -d"
